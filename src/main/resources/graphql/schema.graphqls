enum Attendance {
    ATTENDING
    NOT_ATTENDING
    MAYBE
    NO_RESPONSE
}

type Response {
    id: ID
    message: String
}

type User {
    id: ID
    email: String
    first_name: String
    last_name: String
}

type Event {
    id: ID
    host: User
    title: String
    description: String
    date_of_event: String
    time_of_event: String
    location: String
    invitations: [Invitation]
}

type Invitation {
    id: ID
    event: Event
    guest: User
    comment: String
    attendance: Attendance
}

input InvitationUpdateInput {
    id: Int
    attendance: Attendance
    comment: String
}

type Query {
    getUsers: [User]
    getUserById(id: Int): User

    getEvents: [Event]
    getEventById(id: Int): Event
    getEventsByHostId(host_id: Int): [Event]

    getInvitationById(id: Int): Invitation
    getInvitationsByEventId(event_id: Int): [Invitation]
    getInvitationsByGuestId(guest_id: Int): [Invitation]
}

type Mutation {
    updateInvitation(invitationUpdateInput: InvitationUpdateInput): Response
}

schema {
    query: Query
    mutation: Mutation
}