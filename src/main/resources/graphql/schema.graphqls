type Attendance {
    attendance: 
}

scalar LocalDate
scalar LocalTime

type User {
    id: ID!
    email: String!
    first_name: String
    last_name: String
}

type Account {
    id: ID!
    user: User!
    password: String!
}

type Event {
    id: ID!
    host_id: Int!
    title: String!
    description: String
    date_of_event: LocalDate!
    time_of_event: LocalTime!
    location: String!
    invitations: [Invitation]
}

type Invitation {
    id: ID!
    guest: User!
    event_id: Int!
    attendance: Attendance!
}

type Response {
    id: ID
    message: String
}

input UserInput {
    id: Int
    email: String
    first_name: String
    last_name: String
}

input EventInput {
    id: Int
    host_id: Int!
    title: String!
    description: String
    date_of_event: LocalDate!
    time_of_event: LocalTime!
    location: String!
    invitations: [InvitationInput]
}

input InvitationInput {
    id: Int!
    guest: UserInput!
    event_id: Int
    attendance: Attendance
}

type Query {
    getAllUsers: [User]
    getAllAccounts: [Account]
    getAllEvents: [Event]
    getAllInvitations: [Invitation]
    getUserById(id: Int): User
    getUserByEmail(email: String!): User
    getEventById(id: Int): Event
    getEventsByHostId(id: Int!): [Event]
    getInvitationById(id: Int): Invitation
    getInvitationsByEventId(id: Int): [Invitation]
    getInvitationsByGuestId(id: Int!): [Invitation]
    getAccountById(id: Int): Account
    getAccountByUserEmail(userEmail: String): Account
}

type Mutation {
    createUser(user: UserInput): Response
    createAccount(user: UserInput, password: String): Response
    createEvent(event: EventInput): Response
    setAttendance(attendance: Attendance, invitationId: Int): Response
}

schema {
    query: Query
    mutation: Mutation
}